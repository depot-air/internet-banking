package com.dwidasa.engine.service.facade;

import com.dwidasa.engine.model.Customer;
import com.dwidasa.engine.model.view.CustomerView;

/**
 * <code>WebAuthenticationService</code> authenticate customer credential using username and
 * pin.
 *
 * @author rk
 */
public interface WebAuthenticationService {
    /**
     * authenticate customer credentials, called when customer login using username and pin
     * @param customerUsername customer username
     * @param customerPin pin / password of customer
     * @return customer view object
     * @exception com.dwidasa.engine.BusinessException invalid credentials if credentials specified doesn't match
     *            with customer data
     */
    public CustomerView authenticate(String customerUsername, String customerPin);

    public CustomerView authenticateCardPin(Customer customer, String cardNo);

    /**
     * authenticate token to OTP Server for mobile web application
     * @param customerId customer id
     * @param token token requested from another resource
     * @return true if succeeded
     * @exception com.dwidasa.engine.BusinessException invalid credentials if credentials specified doesn't match
     *            with customer data
     */
    public Boolean authenticateToken(Long customerId, String token);

    /**
     * validate customer session object based on session id
     * @param customerId customer id
     * @param sessionId session id
     * @return true if session id for specified customer user still valid
     * @exception com.dwidasa.engine.BusinessException invalid session id, if no customer session
     *            could be identified based on input parameters
     */
    public Boolean validateCustomerSession(Long customerId, String sessionId);

    /**
     * Check session validity and then authenticate token to OTP Server. OTP function being used to
     * validate is the one WITHOUT challenge.
     * <p/>
     * if a customer failed to authenticate its credentials after a number specifed in FAILED_AUTHENTICATION_ATTEMPTS
     * stored in M_PARAMETER, its account will be deactivated automatically. But upon successful authentication
     * customer failed authentication counter will be reset to zero.
     *
     * @param customerId customer id
     * @param deviceId device id which is token id
     * @param sessionId session id
     * @param token token generated by client device
     * @return true if succeeded
     * @exception com.dwidasa.engine.BusinessException invalid credentials if credentials specified doesn't match
     *            with customer data
     */
    public Boolean authenticateToken(Long customerId, String deviceId, String sessionId, String token);

	public Boolean authenticateTokenRO(String username, String transactionId, String token, Customer customer, String sessionId);
	
	public Boolean authenticateTokenWithChallenge(String username, String transactionId, String token, Customer customer, String sessionId, String challenge);
	
}
