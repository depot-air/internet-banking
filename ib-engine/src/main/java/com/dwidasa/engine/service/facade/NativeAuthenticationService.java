package com.dwidasa.engine.service.facade;

import com.dwidasa.engine.model.view.CustomerView;

/**
 * This authenticator will authenticate request from mobile device native application.
 * Client device that will used this service such as Android, iPhone, etc.
 *
 * @author rk
 */
public interface NativeAuthenticationService {
    /**
     * authenticate customer credentials, called when customer login through customer device
     * <p/>
     * if a customer failed to authenticate its credentials after a number specifed in FAILED_AUTHENTICATION_ATTEMPTS
     * stored in M_PARAMETER, its account will be deactivated automatically. But upon successful authentication
     * customer failed authentication counter will be reset to zero.
     *
     * @param customerId customer user id
     * @param deviceId device id which is token id
     * @param token token generated by client device
     * @return customer view object
     * @exception com.dwidasa.engine.BusinessException invalid credentials if credentials specified doesn't match
     *            with customer data
     */
    public CustomerView authenticate(Long customerId, String deviceId, String token);

    /**
     * Check session validity and then authenticate token to OTP Server. OTP function being used to
     * validate is the one WITH challenge.
     * <p/>
     * if a customer failed to authenticate its credentials after a number specifed in FAILED_AUTHENTICATION_ATTEMPTS
     * stored in M_PARAMETER, its account will be deactivated automatically. But upon successful authentication
     * customer failed authentication counter will be reset to zero.
     *
     * @param customerId customer id
     * @param deviceId device id which is token id
     * @param sessionId session id
     * @param token token generated by client device
     * @return true if succeeded
     * @exception com.dwidasa.engine.BusinessException invalid credentials if credentials specified doesn't match
     *            with customer data
     */
    public Boolean authenticateToken(Long customerId, String deviceId, String sessionId, String token);

    /**
     * validate customer session object based on session id
     * @param customerId customer id
     * @param sessionId session id
     * @return true if session id for specified customer user still valid
     * @exception com.dwidasa.engine.BusinessException invalid session id, if no customer session
     *            could be identified based on input parameters
     */
    public Boolean validateCustomerSession(Long customerId, String sessionId);

    /**
     * request challenge string
     * @param customerId customer id
     * @param deviceId device id
     * @return challenge string
     */
    public String requestChallenge(Long customerId, String deviceId);

    /**
     * Single round trip authentication service
     * @param customerId
     * @param deviceId
     * @param token
     * @param json
     * @return
     */
    public CustomerView authenticate2(Long customerId, String deviceId, String token, String challenge);

    /**
     * Single round trip authentication token service
     * @param customerId
     * @param deviceId
     * @param sessionId
     * @param token
     * @param json
     * @return
     */
    public Boolean authenticateToken2(Long customerId, String deviceId, String sessionId, String token, String json);

}
